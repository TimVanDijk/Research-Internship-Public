


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Program, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000                 EXPORT           F5_add
    4 00000000                 EXPORT           F5_mult
    5 00000000                 EXPORT           F5_sqr
    6 00000000         
    7 00000000 E92D 5FF0 
                       F5_add  PUSH             {r4-r12, r14}
    8 00000004 6803            LDR              r3, [r0]    ; Loads a0 into r3
    9 00000006 6844            LDR              r4, [r0, #4] 
                                                            ; Loads a1 into r4 
                                                            
   10 00000008 6885            LDR              r5, [r0, #8] ; Loads a2 into r5
                                                            
   11 0000000A 680E            LDR              r6, [r1]    ; Loads b0 into r6
   12 0000000C 684F            LDR              r7, [r1, #4] ; Loads b1 into r7
                                                            
   13 0000000E F8D1 8008       LDR              r8, [r1, #8] ; Loads b2 into r8
                                                            
   14 00000012         
   15 00000012 F086 30FF       EOR              r0, r6, #0xffffffff ; 1
   16 00000016 EA00 0107       AND              r1, r0, r7  ; 2
   17 0000001A EA01 0904       AND              r9, r1, r4  ; 3
   18 0000001E         ; We don't need the value in r1 until 47; free up the re
                       gister
   19 0000001E B402            PUSH             {r1}
   20 00000020 F088 3AFF       EOR              r10, r8, #0xffffffff ; 4
   21 00000024 EA4A 0A05       ORR              r10, r10, r5 ; 5
   22 00000028 EA4A 0A04       ORR              r10, r10, r4 ; 6
   23 0000002C F08A 3AFF       EOR              r10, r10, #0xffffffff ; 6
   24 00000030 EA49 090A       ORR              r9, r9, r10 ; 7 - r10 freed
   25 00000034 F089 39FF       EOR              r9, r9, #0xffffffff ; 7
   26 00000038 EA49 0903       ORR              r9, r9, r3  ; 8
   27 0000003C F089 39FF       EOR              r9, r9, #0xffffffff ; 8
   28 00000040 EA48 0A06       ORR              r10, r8, r6 ; 9
   29 00000044 F085 3BFF       EOR              r11, r5, #0xffffffff ; 10
   30 00000048 EA4A 0A0B       ORR              r10, r10, r11 ; 11 - r11 freed
   31 0000004C F084 3BFF       EOR              r11, r4, #0xffffffff ; 12
   32 00000050 EA4B 0C00       ORR              r12, r11, r0 ; 13
   33 00000054 F083 3EFF       EOR              r14, r3, #0xffffffff ; 14
   34 00000058 EA4C 0C0E       ORR              r12, r12, r14 ; 15
   35 0000005C EA0A 0A0C       AND              r10, r10, r12 ; 16 - r12 freed
   36 00000060 F84D CD04       PUSH             {r12}
   37 00000064 EA4A 0A07       ORR              r10, r10, r7 ; 17
   38 00000068 F08A 3AFF       EOR              r10, r10, #0xffffffff ; 17
   39 0000006C EA49 090A       ORR              r9, r9, r10 ; 18 - r10 freed
   40 00000070 EA40 0A04       ORR              r10, r0, r4 ; 19
   41 00000074 EA4A 0A0E       ORR              r10, r10, r14 ; 20
   42 00000078 F087 31FF       EOR              r1, r7, #0xffffffff ; 21
   43 0000007C EA41 010A       ORR              r1, r1, r10 ; 22
   44 00000080 F081 31FF       EOR              r1, r1, #0xffffffff ; 22
   45 00000084 EA41 0109       ORR              r1, r1, r9  ; 23 - r9 freed
   46 00000088         
   47 00000088 6091            STR              r1, [r2, #8] ; Store c2 to memo
                                                            ry and free up r1
   48 0000008A         
   49 0000008A EA00 0103       AND              r1, r0, r3  ; 24
   50 0000008E EA43 0908       ORR              r9, r3, r8  ; 25
   51 00000092 F089 39FF       EOR              r9, r9, #0xffffffff ; 25



ARM Macro Assembler    Page 2 


   52 00000096 EA49 0901       ORR              r9, r9, r1  ; 26 - r1 freed
   53 0000009A F089 39FF       EOR              r9, r9, #0xffffffff ; 26
   54 0000009E EA49 090B       ORR              r9, r9, r11 ; 27
   55 000000A2 EA09 090A       AND              r9, r9, r10 ; 28 - r10 freed
   56 000000A6 EA49 0907       ORR              r9, r9, r7  ; 29
   57 000000AA F089 39FF       EOR              r9, r9, #0xffffffff ; 29
   58 000000AE EA0B 0B07       AND              r11, r11, r7 ; 30
   59 000000B2 EA45 0A06       ORR              r10, r5, r6 ; 31
   60 000000B6 F08A 3AFF       EOR              r10, r10, #0xffffffff ; 31
   61 000000BA EA43 0C00       ORR              r12, r3, r0 ; 32
   62 000000BE F08C 3CFF       EOR              r12, r12, #0xffffffff ; 32
   63 000000C2 EA4C 0A0A       ORR              r10, r12, r10 ; 33 - r10 freed
   64 000000C6 EA0A 0A0B       AND              r10, r10, r11 ; 34 - r11 freed
   65 000000CA EA4A 0A09       ORR              r10, r10, r9 ; 35 - r9 freed
   66 000000CE EA08 0905       AND              r9, r8, r5  ; 36
   67 000000D2 EA4A 0A09       ORR              r10, r10, r9 ; 37 - r9 freed
   68 000000D6 F85D 9B04       POP              {r9}        ; Restore output of
                                                             15
   69 000000DA F087 31FF       EOR              r1, r7, #0xffffffff ; recompute
                                                             ~b1 as input for 3
                                                            8
   70 000000DE EA41 0109       ORR              r1, r1, r9  ; 38 - r12 freed
   71 000000E2 F081 31FF       EOR              r1, r1, #0xffffffff ; 38
   72 000000E6 EA46 0908       ORR              r9, r6, r8  ; 39
   73 000000EA F089 39FF       EOR              r9, r9, #0xffffffff ; 39
   74 000000EE EA09 0903       AND              r9, r9, r3  ; 40
   75 000000F2 EA45 0000       ORR              r0, r5, r0  ; 41
   76 000000F6 EA40 0003       ORR              r0, r0, r3  ; 42
   77 000000FA F080 30FF       EOR              r0, r0, #0xffffffff ; 42
   78 000000FE EA40 0009       ORR              r0, r0, r9  ; 43 - r9 freed
   79 00000102 F080 30FF       EOR              r0, r0, #0xffffffff ; 43
   80 00000106 EA04 0907       AND              r9, r4, r7  ; 44
   81 0000010A EA40 0009       ORR              r0, r0, r9  ; 45 - r9 freed
   82 0000010E F080 30FF       EOR              r0, r0, #0xffffffff ; 45
   83 00000112 EA40 0001       ORR              r0, r0, r1  ; 46
   84 00000116 F85D 9B04       POP              {r9}        ; Fetch result of 2
                                                             from stack to comp
                                                            ute 47
   85 0000011A EA49 0908       ORR              r9, r9, r8  ; 47
   86 0000011E EA09 0905       AND              r9, r9, r5  ; 48 - r12 freed
   87 00000122 EA08 0C04       AND              r12, r8, r4 ; 49
   88 00000126 EA0C 0C0E       AND              r12, r12, r14 ; 50 - r14 freed
   89 0000012A EA4C 0909       ORR              r9, r12, r9 ; 51 - r12 freed
   90 0000012E EA49 0900       ORR              r9, r9, r0  ; 52
   91 00000132         
   92 00000132 F8C2 A004       STR              r10, [r2, #4] ; Store c1 to mem
                                                            ory
   93 00000136 F8C2 9000       STR              r9, [r2]    ; Store c0 to memor
                                                            y  
   94 0000013A         
   95 0000013A F8D2 9000       LDR              r9, [r2]
   96 0000013E F8D2 A004       LDR              r10, [r2, #4]
   97 00000142 F8D2 B008       LDR              r11, [r2, #8]
   98 00000146         
   99 00000146 E8BD 5FF0       POP              {r4-r12, r14}
  100 0000014A 4770            bx               lr
  101 0000014C         
  102 0000014C E92D 1FF0 
                       F5_mult PUSH             {r4-r12}



ARM Macro Assembler    Page 3 


  103 00000150 6803            LDR              r3, [r0]    ; Loads a0 into r3
  104 00000152 6844            LDR              r4, [r0, #4] 
                                                            ; Loads a1 into r4 
                                                            
  105 00000154 6885            LDR              r5, [r0, #8] ; Loads a2 into r5
                                                            
  106 00000156 680E            LDR              r6, [r1]    ; Loads b0 into r6
  107 00000158 684F            LDR              r7, [r1, #4] ; Loads b1 into r7
                                                            
  108 0000015A F8D1 8008       LDR              r8, [r1, #8] ; Loads b2 into r8
                                                            
  109 0000015E         
  110 0000015E F086 30FF       EOR              r0, r6, #0xffffffff ; 1
  111 00000162 EA40 0107       ORR              r1, r0, r7  ; 2
  112 00000166 F081 31FF       EOR              r1, r1, #0xffffffff ; 2
  113 0000016A EA01 0905       AND              r9, r1, r5  ; 3
  114 0000016E F084 3AFF       EOR              r10, r4, #0xffffffff ; 4
  115 00000172 EA08 0B0A       AND              r11, r8, r10 ; 5
  116 00000176 EA0B 0B03       AND              r11, r11, r3 ; 6
  117 0000017A EA4B 0B09       ORR              r11, r11, r9 ; 7 - r9 freed
  118 0000017E F087 39FF       EOR              r9, r7, #0xffffffff ; 8
  119 00000182 EA49 090A       ORR              r9, r9, r10 ; 9 - r10 freed
  120 00000186 EA83 0A06       EOR              r10, r3, r6 ; 10
  121 0000018A EA4A 0A09       ORR              r10, r10, r9 ; 11
  122 0000018E F08A 3AFF       EOR              r10, r10, #0xffffffff ; 11
  123 00000192 EA4A 0A0B       ORR              r10, r10, r11 ; 12 - r11 freed
  124 00000196 EA41 0108       ORR              r1, r1, r8  ; 13
  125 0000019A EA01 0104       AND              r1, r1, r4  ; 14
  126 0000019E F083 3BFF       EOR              r11, r3, #0xffffffff ; 15
  127 000001A2 EA44 040B       ORR              r4, r4, r11 ; 16
  128 000001A6 F084 34FF       EOR              r4, r4, #0xffffffff ; 16
  129 000001AA EA44 0405       ORR              r4, r4, r5  ; 17
  130 000001AE EA04 0407       AND              r4, r4, r7  ; 18
  131 000001B2 EA41 0104       ORR              r1, r1, r4  ; 19 - r4 freed
  132 000001B6 EA05 0408       AND              r4, r5, r8  ; 20
  133 000001BA EA49 0C0A       ORR              r12, r9, r10 ; 21
  134 000001BE F08C 3CFF       EOR              r12, r12, #0xffffffff ; 21
  135 000001C2 EA4C 0C04       ORR              r12, r12, r4 ; 22 - r4 freed
  136 000001C6 EA00 0005       AND              r0, r0, r5  ; 23
  137 000001CA EA0B 0B08       AND              r11, r11, r8 ; 24
  138 000001CE EA4B 0B00       ORR              r11, r11, r0 ; 25 - r0 freed
  139 000001D2 EA0B 0B01       AND              r11, r11, r1 ; 26
  140 000001D6 EA06 0603       AND              r6, r6, r3  ; 27
  141 000001DA EA06 0609       AND              r6, r6, r9  ; 28 - r9 freed
  142 000001DE EA46 060B       ORR              r6, r6, r11 ; 29
  143 000001E2 EA46 060C       ORR              r6, r6, r12 ; 30
  144 000001E6         
  145 000001E6 6016            STR              r6, [r2]
  146 000001E8 6051            STR              r1, [r2, #4]
  147 000001EA F8C2 A008       STR              r10, [r2, #8]
  148 000001EE         
  149 000001EE E8BD 1FF0       POP              {r4-r12}
  150 000001F2 4770            bx               lr
  151 000001F4         
  152 000001F4         
  153 000001F4 6802    F5_sqr  LDR              r2, [r0]    ; Loads a0 into r2
  154 000001F6 6843            LDR              r3, [r0, #4] ; Loads a1 into r3
                                                            
  155 000001F8 6880            LDR              r0, [r0, #8] ; Loads a2 into r0



ARM Macro Assembler    Page 4 


                                                            
  156 000001FA         
  157 000001FA 608B            STR              r3, [r1, #8] ; c2 = a1
  158 000001FC         
  159 000001FC F083 33FF       EOR              r3, r3, #0xffffffff ; r3 = ~a1
  160 00000200 EA02 0303       AND              r3, r2, r3  ; r3 = a0 & ~a1
  161 00000204 EA43 0300       ORR              r3, r3, r0  ; r3 = a2 | (a0 & ~
                                                            a1)
  162 00000208 EA80 0000       EOR              r0, r0, r0  ; r0 = 0
  163 0000020C         
  164 0000020C 600B            STR              r3, [r1]    ; c0 = a2 | (a0 & ~
                                                            a1)
  165 0000020E 6048            STR              r0, [r1, #4] ; c1 = 0
  166 00000210         
  167 00000210 4770            bx               lr
  168 00000212         
  169 00000212                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\f5_operations.d -o.\objects\f5_operations.o -I.\RTE\_Tar
get_1 -I"D:\Program Files (x86)\Keil\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include" -I
"D:\Program Files (x86)\Keil\ARM\PACK\ARM\CMSIS\5.3.0\Device\ARM\ARMCM4\Include
" --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 525" --predef
ine="_RTE_ SETA 1" --predefine="ARMCM4 SETA 1" --list=.\listings\f5_operations.
lst F5_operations.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

F5_add 00000000

Symbol: F5_add
   Definitions
      At line 7 in file F5_operations.s
   Uses
      At line 3 in file F5_operations.s
Comment: F5_add used once
F5_mult 0000014C

Symbol: F5_mult
   Definitions
      At line 102 in file F5_operations.s
   Uses
      At line 4 in file F5_operations.s
Comment: F5_mult used once
F5_sqr 000001F4

Symbol: F5_sqr
   Definitions
      At line 153 in file F5_operations.s
   Uses
      At line 5 in file F5_operations.s
Comment: F5_sqr used once
Program 00000000

Symbol: Program
   Definitions
      At line 1 in file F5_operations.s
   Uses
      None
Comment: Program unused
4 symbols
338 symbols in table
